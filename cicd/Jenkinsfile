pipeline {
    agent any

    environment {
        // Terraform wants these env-vars
        TF_IN_AUTOMATION = 'true'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Lint') {
            steps {
                sh 'make lint'
            }
        }

        stage('Plan') {
            steps {
                withCredentials([
                    string(credentialsId: 'proxmox-token', variable: 'PM_SECRET'),
                    string(credentialsId: 'vm-password', variable: 'VM_PASSWORD')
                ]) {
                    withEnv([
                        'TF_VAR_pm_api_token_id=root@pam!terraform1',
                        'TF_VAR_pm_api_token_secret=' + PM_SECRET,
                        'TF_VAR_cloud_init_password=' + VM_PASSWORD
                    ]) {
                        sh 'make plan'
                    }
                }
            }
        }

        stage('OPA Policy Check') {
            steps {
                sh '''
                    cd terraform
                    echo "Running OPA policy validation..."
                    
                    # Check if OPA is properly installed
                    if ! command -v opa >/dev/null 2>&1; then
                        echo "WARNING: OPA is not installed or not in PATH"
                        echo "Skipping OPA policy validation"
                        exit 0
                    fi
                    
                    echo "OPA found at: $(command -v opa)"
                    
                    # Test OPA is working
                    if ! opa version >/dev/null 2>&1; then
                        echo "WARNING: OPA binary exists but is not working properly"
                        echo "Skipping OPA policy validation"
                        exit 0
                    fi
                    
                    echo "OPA is working correctly - proceeding with policy validation"
                    
                    # Convert terraform plan to JSON
                    terraform show -json plan.tfplan > plan.json
                    
                    # Run OPA evaluation against the plan
                    OPA_OUTPUT=$(opa eval -d ../terraform/opa-policies/terraform.rego -i plan.json "data.terraform.deny[msg]" 2>&1 || true)
                    
                    if echo "$OPA_OUTPUT" | grep -q "Syntax error"; then
                        echo "ERROR: OPA binary is corrupted or incompatible"
                        echo "Please reinstall OPA on the Jenkins server"
                        echo "Skipping OPA validation due to binary issues"
                        exit 0
                    fi
                    
                    if echo "$OPA_OUTPUT" | grep -q '"msg"'; then
                        echo "OPA Policy Violations Found:"
                        echo "$OPA_OUTPUT"
                        exit 1
                    else
                        echo "All OPA policies passed successfully!"
                    fi
                    
                    # Also check for any warnings
                    WARN_OUTPUT=$(opa eval -d ../terraform/opa-policies/terraform.rego -i plan.json "data.terraform.warn[msg]" 2>&1 || true)
                    if echo "$WARN_OUTPUT" | grep -q '"msg"'; then
                        echo "OPA Policy Warnings:"
                        echo "$WARN_OUTPUT"
                    fi
                '''
            }
        }

        stage('Apply') {
            when {
              expression {
                // This works in both single and multibranch jobs,
                // as long as you tell Git to checkout "main".
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([
                string(credentialsId: 'proxmox-token', variable: 'PM_SECRET'),
                string(credentialsId: 'vm-password', variable: 'VM_PASSWORD')
              ]) {
                withEnv([
                  'TF_VAR_pm_api_token_id=root@pam!terraform1',
                  'TF_VAR_pm_api_token_secret=' + PM_SECRET,
                  'TF_VAR_cloud_init_password=' + VM_PASSWORD
                ]) {
                  sh 'make apply || (cd terraform && terraform init && cd .. && make apply)'
                }
              }
            }
          }

        stage('Configure VMs') {
            when {
              expression {
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([
                sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY'),
                string(credentialsId: 'proxmox-token', variable: 'PM_SECRET')
              ]) {
                sh '''
                  cd ansible
                  export ANSIBLE_HOST_KEY_CHECKING=False
                  export ANSIBLE_PRIVATE_KEY_FILE="${SSH_KEY}"
                  
                  # Wait for VMs to be ready and cloud-init to complete
                  echo "Waiting for VMs to be ready and cloud-init to complete..."
                  sleep 120  # Wait for cloud-init to complete
                  
                  # Obtain VM IPs from Terraform output
                  echo "Retrieving VM IPs from Terraform state..."
                  VM_IPS=$(cd ../terraform && terraform output -json vm_ips | jq -r '.[]')

                  # Clean Jenkins known_hosts for VMs to avoid host key conflicts
                  for IP in $VM_IPS; do
                    ssh-keygen -f "/var/lib/jenkins/.ssh/known_hosts" -R "$IP" 2>/dev/null || true
                  done

                  # Debug SSH key being used by Jenkins
                  echo "=== SSH KEY DEBUG ==="
                  echo "SSH key file: ${SSH_KEY}"
                  echo "SSH key fingerprint:"
                  ssh-keygen -lf "${SSH_KEY}" || echo "Failed to get key fingerprint"
                  echo "SSH key type:"
                  head -1 "${SSH_KEY}" || echo "Failed to read key file"

                  # Debug each VM's status
                  for IP in $VM_IPS; do
                    echo "=== DEBUGGING VM STATUS: $IP ==="
                    echo "Testing basic connectivity..."
                    ping -c 3 $IP || echo "VM not responding to ping"

                    echo "Testing if SSH port is open..."
                    nc -zv $IP 22 || echo "SSH port not accessible"

                    echo "Trying SSH as ubuntu user with key (verbose)..."
                    ssh -vvv -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ubuntu@$IP "whoami" || echo "Ubuntu user SSH with key failed"

                    echo "Trying SSH as ubuntu user with password (temp123)..."
                    sshpass -p 'temp123' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$IP "whoami; cloud-init status; cat /var/log/cloud-init.log | tail -20" || echo "Ubuntu user SSH with password failed"

                    echo "Testing cloud-init completion..."
                    ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ubuntu@$IP "cloud-init status" || echo "Cloud-init status check failed"
                  done
                  
                  # Test SSH connectivity with Ansible
                  echo "Testing SSH connectivity with Ansible..."
                  ansible all -i hosts_dynamic.yml -m ping --timeout=30 || {
                    echo "=== SSH test failed ==="
                    echo "This could mean:"
                    echo "1. Cloud-init hasn't finished properly"
                    echo "2. SSH keys weren't properly injected"
                    echo "3. Network connectivity issues"
                    exit 1
                  }
                  
                  # Run Ansible playbook with dynamic inventory
                  ansible-playbook -i hosts_dynamic.yml site.yml
                '''
              }
            }
          }
    }
}