pipeline {
    agent any

    environment {
        // Terraform wants these env-vars
        TF_IN_AUTOMATION = 'true'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Lint') {
            steps {
                sh 'make lint'
            }
        }

        stage('Plan') {
            steps {
                withCredentials([string(credentialsId: 'proxmox-token', variable: 'PM_SECRET')]) {
                    withEnv([
                        'TF_VAR_pm_api_token_id=root@pam!terraform1',
                        'TF_VAR_pm_api_token_secret=' + PM_SECRET
                    ]) {
                        sh 'make plan'
                    }
                }
            }
        }

        stage('Apply') {
            when {
              expression {
                // This works in both single and multibranch jobs,
                // as long as you tell Git to checkout "main".
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([string(credentialsId: 'proxmox-token', variable: 'PM_SECRET')]) {
                withEnv([
                  'TF_VAR_pm_api_token_id=root@pam!terraform1',
                  'TF_VAR_pm_api_token_secret=' + PM_SECRET
                ]) {
                  sh 'make apply || (cd terraform && terraform init && cd .. && make apply)'
                }
              }
            }
          }

        stage('Configure VMs') {
            when {
              expression {
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([
                sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')
              ]) {
                sh '''
                  cd ansible
                  export ANSIBLE_HOST_KEY_CHECKING=False
                  export ANSIBLE_PRIVATE_KEY_FILE="${SSH_KEY}"
                  
                  # Wait for VMs to be ready and cloud-init to complete
                  echo "Waiting for VMs to be ready and cloud-init to complete..."
                  echo "Since we're using DHCP, VMs need extra time to get IPs from DHCP server..."
                  sleep 180  # Increased wait time for DHCP assignment
                  
                  # Obtain VM IPs from Terraform output (with retry logic)
                  echo "Retrieving VM IPs from Terraform state..."
                  cd ../terraform
                  
                  # Refresh Terraform state to get latest IPs from QEMU Guest Agent
                  terraform refresh
                  
                  VM_IPS=$(terraform output -json vm_ips | jq -r '.[]')
                  
                  # Check if we got valid IPs
                  if [ -z "$VM_IPS" ] || echo "$VM_IPS" | grep -q "null"; then
                    echo "WARNING: No IPs retrieved yet. Waiting additional 60 seconds..."
                    sleep 60
                    terraform refresh
                    VM_IPS=$(terraform output -json vm_ips | jq -r '.[]')
                  fi
                  
                  cd ../ansible

                  # Debug each VM's status
                  for IP in $VM_IPS; do
                    echo "=== DEBUGGING VM STATUS: $IP ==="
                    echo "Testing basic connectivity..."
                    ping -c 3 $IP || echo "VM not responding to ping"

                    echo "Testing if SSH port is open..."
                    nc -zv $IP 22 || echo "SSH port not accessible"

                    echo "Trying SSH as root first (to check cloud-init)..."
                    ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o ConnectTimeout=10 root@$IP "whoami; cloud-init status" || echo "Root SSH failed"

                    echo "Trying SSH as ubuntu user with key..."
                    ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$IP "whoami" || echo "Ubuntu user SSH with key failed"

                    echo "Trying SSH as ubuntu user with password (temp123)..."
                    sshpass -p 'temp123' ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$IP "whoami; cloud-init status; cat /var/log/cloud-init.log | tail -20" || echo "Ubuntu user SSH with password failed"

                    echo "Trying SSH as ansible user..."
                    ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no -o ConnectTimeout=10 ansible@$IP "whoami" || echo "Ansible user SSH failed"
                  done
                  
                  # Test SSH connectivity with Ansible
                  echo "Testing SSH connectivity with Ansible..."
                  ansible all -i inventories/hosts_dynamic.yml -m ping --timeout=30 || {
                    echo "=== SSH test failed ==="
                    echo "This could mean:"
                    echo "1. Cloud-init hasn't finished creating the ansible user"
                    echo "2. SSH keys weren't properly injected"
                    echo "3. Network connectivity issues"
                    exit 1
                  }
                  
                  # Run Ansible playbook with dynamic inventory
                  ansible-playbook -i inventories/hosts_dynamic.yml site.yml
                '''
              }
            }
          }
    }
}