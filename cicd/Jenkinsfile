pipeline {
    agent any

    environment {
        // Terraform wants these env-vars
        TF_IN_AUTOMATION = 'true'
    }

    stages {

        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Lint') {
            steps {
                sh 'make lint'
            }
        }

        stage('Plan') {
            steps {
                withCredentials([string(credentialsId: 'proxmox-token', variable: 'PM_SECRET')]) {
                    withEnv([
                        'TF_VAR_pm_api_token_id=root@pam!terraform1',
                        'TF_VAR_pm_api_token_secret=' + PM_SECRET
                    ]) {
                        sh 'make plan'
                    }
                }
            }
        }

        stage('Apply') {
            when {
              expression {
                // This works in both single and multibranch jobs,
                // as long as you tell Git to checkout "main".
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([string(credentialsId: 'proxmox-token', variable: 'PM_SECRET')]) {
                withEnv([
                  'TF_VAR_pm_api_token_id=root@pam!terraform1',
                  'TF_VAR_pm_api_token_secret=' + PM_SECRET
                ]) {
                  sh 'make apply || (cd terraform && terraform init && cd .. && make apply)'
                }
              }
            }
          }

        stage('Configure VMs') {
            when {
              expression {
                return env.GIT_BRANCH?.endsWith('main') || env.BRANCH_NAME == 'main'
              }
            }
            steps {
              withCredentials([
                sshUserPrivateKey(credentialsId: 'ansible-ssh-key', keyFileVariable: 'SSH_KEY')
              ]) {
                sh '''
                  cd ansible
                  export ANSIBLE_HOST_KEY_CHECKING=False
                  export ANSIBLE_PRIVATE_KEY_FILE="${SSH_KEY}"
                  
                  # Wait for VMs to be ready and cloud-init to complete
                  echo "Waiting for VMs to be ready and cloud-init to complete..."
                  sleep 120
                  
                  # Test SSH connectivity first
                  echo "Testing SSH connectivity..."
                  ansible all -i inventories/hosts_dynamic.yml -m ping --timeout=30 || {
                    echo "SSH test failed, checking cloud-init status..."
                    # Try to check cloud-init status (this might fail if SSH is broken)
                    ssh -i "${SSH_KEY}" -o StrictHostKeyChecking=no ansible@192.168.178.50 "cloud-init status" || echo "Could not check cloud-init status"
                    exit 1
                  }
                  
                  # Run Ansible playbook with dynamic inventory
                  ansible-playbook -i inventories/hosts_dynamic.yml site.yml
                '''
              }
            }
          }
    }
}